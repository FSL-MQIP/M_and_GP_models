#Expanding the dataframe to store observations for each strain and day of observation
packages_sim_exp <- packages_sim
#Creating a dataframe, to assess microbial growth over shelf life
shelf_life_sim <- packages_sim_exp %>%
group_by(package) %>%
dplyr::slice(rep(1, times = 10)) %>%
mutate(day = 1:10) %>%
mutate(day2 = I(day^2), day.log_d0_conc = day*initial_count,
day2.log_d0_conc = day2*initial_count) %>%
mutate(count = NA)
colnames(shelf_life_sim)[1] <- "lot"
colnames(shelf_life_sim)[2] <- "lot_d0_conc"
colnames(shelf_life_sim)[3] <- "temperature"
colnames(shelf_life_sim)[6] <- "day:lot_d0_conc"
colnames(shelf_life_sim)[7] <- "lot_d0_conc:day2"
shelf_life_sim$count <- predict(mod, shelf_life_sim[, c(4, 2, 5)], level = 0)
colnames(shelf_life_sim)[1] <- "package"
colnames(shelf_life_sim)[2] <- "initial_count"
colnames(shelf_life_sim)[3] <- "storage_temp"
count_summary_by_day <- shelf_life_sim %>%
dplyr::select(-c("day2", "day:lot_d0_conc", "lot_d0_conc:day2")) %>%
mutate(growth_model = "gp-apc",
loc = "china",
sampling_code = "overall")
## -----------------------------Packages----------------------------------------
#   Loading packages
library(tidyverse); library(dplyr); library(nlme); library(gpboost);
library(iml); library(Metrics)
## -----------------------------Reading in Data---------------------------------
growth_curves <- read.csv("data/wrangled/growth_curve_biorep_2024_07_28.csv", header = TRUE)
setwd("/Volumes/BoorWiedmannLab/ss2633_Sriya_Sunil/Research/Walmart_Spinach_Project/Papers/Paper2_ss2633/data_analysis/ml_models")
walmart <- read.csv("data/wrangled/walmart_biorep_01_2024_07_28.csv", header = TRUE)
walmart$lot <- as.factor(walmart$lot)
walmart$temperature <- as.numeric(walmart$temperature)
walmart$day <- as.numeric(walmart$day)
walmart$log_conc_geom <- as.numeric(walmart$log_conc_geom)
walmart$lot_d0_conc <- as.numeric(walmart$lot_d0_conc)
View(walmart)
library(dplyr); library(lmerTest); library(ggplot2); library(tidyverse)
library(reshape2); library(forcats)
counts <- read.csv("sampling_data/raw/microdata_fullV2.csv", header = TRUE, stringsAsFactors = FALSE)
library(dplyr); library(lmerTest); library(ggplot2); library(tidyverse)
library(reshape2); library(forcats)
counts <- read.csv("sampling_data/raw/microdata_fullV2.csv", header = TRUE, stringsAsFactors = FALSE)
setwd("/Volumes/BoorWiedmannLab/ss2633_Sriya_Sunil/Research/Walmart_Spinach_Project/Papers/Paper2_ss2633/data_analysis/china_supply_chain_data")
library(dplyr); library(lmerTest); library(ggplot2); library(tidyverse)
library(reshape2); library(forcats)
counts <- read.csv("sampling_data/raw/microdata_fullV2.csv", header = TRUE, stringsAsFactors = FALSE)
sample_mass <- read.csv("sampling_data/raw/testweights_full.csv", header = TRUE, stringsAsFactors = FALSE)
#S1 - S3 data, from Murphy et al. 2022 (https://github.com/IvanekLab/SpinachSpoilage)
s1_s3 <- read.csv("sampling_data/raw/ShelfLifeMicroData.csv", header = TRUE, stringsAsFactors = FALSE)
sample_mass <- sample_mass %>%
mutate(stage = case_when(
stage == "SL3" ~ "D3",
stage == "SL5" ~ "D5",
stage == "SL7" ~ "D7",
stage == "SL10" ~ "D10",
.default = as.character(stage)
))
counts <- counts %>%
mutate(stage = case_when(
stage == "SL3" ~ "D3",
stage == "SL5" ~ "D5",
stage == "SL7" ~ "D7",
stage == "SL10" ~ "D10",
.default = as.character(stage)
))
sample_mass$stage <- ifelse(
(sample_mass$sampling %in% c("F1", "F2", "F3", "F4", "R1",
"R2", "R3", "R4", "R5", "R6", "R7") &
sample_mass$stage == "P"),
"D0",
sample_mass$stage)
counts$stage <- ifelse(
(counts$sampling %in% c("F1", "F2", "F3", "F4", "R1",
"R2", "R3", "R4", "R5", "R6", "R7") &
counts$stage == "P"),
"D0",
counts$stage)
sample_mass_removed <- sample_mass %>%
filter(grepl("NotPacked", weight_before_dilution)) %>%
filter(grepl("NA", weight_before_dilution))
sample_mass_v2 <-  sample_mass %>%
filter(!grepl("NotPacked", weight_before_dilution)) %>%
filter(!grepl("NA", weight_before_dilution))
counts_removed <- counts %>%
filter(grepl("Not Packed", notes)) %>%
filter(grepl("NA", raw_count))
counts_v2 <-  counts %>%
filter(!grepl("Not Packed", notes)) %>%
filter(!grepl("NA", raw_count))
counts_v2 %>%
group_by(location, sampling, stage, sample_rep, test) %>%
mutate(same_dilution = dilution[1] == dilution[2]) %>%
with(table(same_dilution))
counts_v2$raw_count[counts_v2$raw_count == "TNTC" & counts_v2$test == "APC"] <- 300*1.25
counts_v2$raw_count[counts_v2$raw_count == "TNTC" & counts_v2$test == "GN"] <- 150*1.25
counts_v2$raw_count <- as.numeric(counts_v2$raw_count)
counts_v3 <- counts_v2 %>%
group_by(location, sampling, stage, sample_rep, test, dilution) %>%
mutate(averaged_count = mean(raw_count)) %>%
distinct(location, sampling, stage, sample_rep, test, dilution, averaged_count)
counts_v3$merge_col <- paste0(counts_v3$location, "_",
counts_v3$sampling, "_",
counts_v3$stage, "_",
counts_v3$sample_rep)
sample_mass_v2$merge_col <- paste0(sample_mass_v2$location, "_",
sample_mass_v2$sampling, "_",
sample_mass_v2$stage, "_",
sample_mass_v2$sample_rep)
data <- merge(counts_v3, sample_mass_v2, by = "merge_col",) %>%
dplyr::select(location.x, sampling.x, stage.x, sample_rep.x, test, weight_before_dilution,
weight_after_dilution, dilution, averaged_count)
colnames(data)[1:4] <- c("location", "sampling", "stage", "sample_rep")
data[, c("weight_before_dilution", "weight_after_dilution",
"dilution", "averaged_count")] <- sapply(data[, c("weight_before_dilution", "weight_after_dilution",
"dilution", "averaged_count")],
as.numeric)
buffer_mass <- data %>%
filter(!is.na(weight_after_dilution)) %>%
mutate(buffer_mass = weight_after_dilution - weight_before_dilution)
mean_buffer_mass <- mean(buffer_mass$buffer_mass)
data$weight_after_dilution <- ifelse(is.na(data$weight_after_dilution),
(data$weight_before_dilution + mean_buffer_mass),
data$weight_after_dilution)
data_arith <- data %>%
mutate(conc_arith = log10(averaged_count*
(weight_after_dilution/weight_before_dilution)*
(10^dilution))) %>%
dplyr::select(-c("weight_before_dilution", "weight_after_dilution", "dilution",
"averaged_count"))
data_geom <- data_arith %>%
group_by(location, sampling, stage, test) %>%
mutate(conc_geom = mean(conc_arith)) %>%
distinct(location, sampling, stage, test, conc_geom)
data_geom$season <- ifelse(grepl("S", data_geom$sampling),
"winter",
"summer")
data_geom_analysis <- data_geom %>%
filter(!(sampling %in% c("S1", "S2", "S3")))
e_com_test_data <- data_geom_analysis %>%
filter(stage == "D10") %>%
filter(!sampling %in% c("R7", "F3", "R1"))
e_com_test_data %>%
group_by(test, location) %>%
summarize(median = median(conc_geom),
percentile25 = summary(conc_geom)[2],
percentile75 = summary(conc_geom)[5])
e_com_test_data_subset <- e_com_test_data %>%
filter(test == "APC", location == "E")
wilcox.test(conc_geom ~ location, data = filter(e_com_test_data, test == "APC"), paired = TRUE)
wilcox.test(conc_geom ~ location, data = filter(e_com_test_data, test == "GN"), paired = TRUE)
wilcox.test(conc_geom ~ location, data = filter(e_com_test_data, test == "YM"), paired = TRUE)
summary_stats <- data_geom_analysis %>%
group_by(location, stage, test) %>%
summarize(median = quantile(conc_geom, type = 7)[3],
lq = quantile(conc_geom, type = 7)[2],
uq = quantile(conc_geom, type = 7)[4],
n = n())
net_growth_h_d0 <- data_geom_analysis %>%
filter(!(sampling %in% c("S5", "S6", "S8"))) %>%
filter(stage %in% c("H", "D0")) %>%
group_by(sampling, test) %>%
mutate(h_conc = conc_geom[stage == "H"]) %>%
ungroup() %>%
filter(stage == "D0") %>%
mutate(net_growth = conc_geom - h_conc)
net_growth_summary_h_d0 <- net_growth_h_d0 %>%
group_by(location, test) %>%
summarize(mean = mean(net_growth),
min = min(net_growth),
max = max(net_growth),
n = n())
net_growth_d0_d10 <- data_geom_analysis %>%
filter(!(sampling %in% c("S4", "S5", "S6", "S7", "S8", "S9"))) %>%
filter(stage %in% c("D0", "D10")) %>%
group_by(sampling, test) %>%
mutate(day0_conc = conc_geom[stage == "D0"]) %>%
ungroup() %>%
filter(stage == "D10") %>%
mutate(net_growth = conc_geom - day0_conc)
net_growth_summary_d0_d10 <- net_growth_d0_d10 %>%
group_by(location, test) %>%
summarize(mean = mean(net_growth),
min = min(net_growth),
max = max(net_growth),
n = n())
paired_net_growth_d0_d10 <- net_growth_d0_d10 %>%
filter(sampling %in% c("F1", "F2", "F4", "R2",
"R3", "R4", "R5", "R6")) %>%
dplyr::select("sampling", "test", "net_growth", "location") %>%
pivot_wider(names_from = location, values_from = net_growth)
#Net growth by distribution channel
paired_apc_net_growth <- filter(paired_net_growth_d0_d10, test == "APC")
wilcox.test(paired_apc_net_growth$E, paired_apc_net_growth$L, paired = TRUE)
paired_gn_net_growth <- filter(paired_net_growth_d0_d10, test == "GN")
wilcox.test(paired_gn_net_growth$E, paired_gn_net_growth$L, paired = TRUE)
paired_ym_net_growth <- filter(paired_net_growth_d0_d10, test == "YM")
wilcox.test(paired_ym_net_growth$E, paired_ym_net_growth$L, paired = TRUE)
data_geom$stage <- factor(data_geom$stage, levels = c("H", "T", "R", "D0",
"D2", "D3", "D4",
"D5", "D6", "D7",
"D8", "D10"))
data_geom_plot <- filter(data_geom, !(sampling %in% c("S1", "S2", "S3")))
data_geom_plot$location <- ifelse(data_geom_plot$location == "E",
"eCommerce",
"Local")
data_geom_plot$location <- factor(data_geom_plot$location,
levels = c("Local", "eCommerce"))
data_geom_boxplot <- filter(data_geom_plot,
stage %in% c("H", "D0", "D10"))
ggplot() +
geom_point(data = data_geom_plot,
aes(x = factor(stage), y = conc_geom, color = location, group = location),
alpha = 0,
position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.6)) +
facet_wrap( ~ test, nrow = 3) +
scale_color_brewer(palette = "Dark2", name = "Distribution channel") +
theme(strip.text = element_text(size = 7), axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6)) +
geom_boxplot(data = data_geom_boxplot,
aes(x = factor(stage), y = conc_geom, color = location),
outlier.size=2, outlier.shape = NA, linewidth = 0.3, width = 0.4,
position = position_dodge2(preserve = "single")) +
geom_point(data = data_geom_plot,
aes(x = factor(stage), y = conc_geom, color = location, group = location),
size = 0.3,
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.6)) +
ylab(expression("Concentration, log"[10]*"CFU/g")) + xlab("Sample") +
theme_bw()
s1_s3_geom_by_location <- s1_s3 %>%
mutate(lot = case_when(
lot == "L1" ~ "S1",
lot == "L2" ~ "S2",
lot == "L3" ~ "S3"
)) %>%
group_by(location, lot, stage, test) %>%
summarise(conc_geom = mean(log10count)) %>%
mutate(season = "winter")
s1_s3_geom_mod <- s1_s3 %>%
mutate(lot = case_when(
lot == "L1" ~ "S1",
lot == "L2" ~ "S2",
lot == "L3" ~ "S3"
)) %>%
filter(location != "E") %>%
group_by(lot, stage, test) %>%
summarise(conc_geom = mean(log10count)) %>%
mutate(season = "winter")
View(s1_s3_geom_mod)
s1_s3_geom_mod$stage <- ifelse(s1_s3_geom_mod$stage == "DI",
"D3",
s1_s3_geom_mod$stage)
colnames(s1_s3_geom_mod)[1] <- "sampling"
data_geom_mod <- data_arith %>%
filter(!(sampling %in% c("S1", "S2", "S3"))) %>%
group_by(sampling, stage, test) %>%
mutate(conc_geom = mean(conc_arith)) %>%
distinct(sampling, stage, test, conc_geom)
data_geom_mod$season <- ifelse(grepl("S", data_geom_mod$sampling),
"winter",
"summer")
mod_data <- bind_rows(s1_s3_geom_mod, data_geom_mod)
View(mod_data)
#Sampling_specific starting concentration
starting_conc <- data_arith %>%
filter(stage == "D0" & test == "APC") %>%
group_by(sampling) %>%
summarize(min = min(conc_arith), max = max(conc_arith))
View(mod_data)
#Export data
date <- Sys.Date()
date <- gsub("-", "_", date)
write.csv(mod_data, paste0("sampling_data/wrangled/concentration_by_day_modeling_data_", date, ".csv"),
row.names = FALSE)
write.csv(starting_conc, paste0("sampling_data/wrangled/china_starting_conc_", date, ".csv"),
row.names = FALSE)
setwd("/Volumes/BoorWiedmannLab/ss2633_Sriya_Sunil/Research/Walmart_Spinach_Project/Papers/Paper2_ss2633/data_analysis/ml_models")
## -----------------------------Packages----------------------------------------
#   Loading packages
library(tidyverse); library(dplyr); library(nlme); library(gpboost);
library(iml); library(Metrics)
## -----------------------------Reading in Data---------------------------------
growth_curves <- read.csv("data/wrangled/growth_curve_biorep_2024_07_28.csv", header = TRUE)
walmart <- read.csv("data/wrangled/walmart_biorep_01_2024_07_28.csv", header = TRUE)
View(walmart)
setwd("/Volumes/BoorWiedmannLab/ss2633_Sriya_Sunil/Research/Walmart_Spinach_Project/Papers/Paper2_ss2633/data_analysis/china_supply_chain_data")
library(dplyr); library(lmerTest); library(ggplot2); library(tidyverse)
library(reshape2); library(forcats)
counts <- read.csv("sampling_data/raw/microdata_fullV2.csv", header = TRUE, stringsAsFactors = FALSE)
sample_mass <- read.csv("sampling_data/raw/testweights_full.csv", header = TRUE, stringsAsFactors = FALSE)
#S1 - S3 data, from Murphy et al. 2022 (https://github.com/IvanekLab/SpinachSpoilage)
s1_s3 <- read.csv("sampling_data/raw/ShelfLifeMicroData.csv", header = TRUE, stringsAsFactors = FALSE)
sample_mass <- sample_mass %>%
mutate(stage = case_when(
stage == "SL3" ~ "D3",
stage == "SL5" ~ "D5",
stage == "SL7" ~ "D7",
stage == "SL10" ~ "D10",
.default = as.character(stage)
))
counts <- counts %>%
mutate(stage = case_when(
stage == "SL3" ~ "D3",
stage == "SL5" ~ "D5",
stage == "SL7" ~ "D7",
stage == "SL10" ~ "D10",
.default = as.character(stage)
))
sample_mass$stage <- ifelse(
(sample_mass$sampling %in% c("F1", "F2", "F3", "F4", "R1",
"R2", "R3", "R4", "R5", "R6", "R7") &
sample_mass$stage == "P"),
"D0",
sample_mass$stage)
counts$stage <- ifelse(
(counts$sampling %in% c("F1", "F2", "F3", "F4", "R1",
"R2", "R3", "R4", "R5", "R6", "R7") &
counts$stage == "P"),
"D0",
counts$stage)
sample_mass_removed <- sample_mass %>%
filter(grepl("NotPacked", weight_before_dilution)) %>%
filter(grepl("NA", weight_before_dilution))
sample_mass_v2 <-  sample_mass %>%
filter(!grepl("NotPacked", weight_before_dilution)) %>%
filter(!grepl("NA", weight_before_dilution))
counts_removed <- counts %>%
filter(grepl("Not Packed", notes)) %>%
filter(grepl("NA", raw_count))
counts_v2 <-  counts %>%
filter(!grepl("Not Packed", notes)) %>%
filter(!grepl("NA", raw_count))
counts_v2 %>%
group_by(location, sampling, stage, sample_rep, test) %>%
mutate(same_dilution = dilution[1] == dilution[2]) %>%
with(table(same_dilution))
counts_v2$raw_count[counts_v2$raw_count == "TNTC" & counts_v2$test == "APC"] <- 300*1.25
counts_v2$raw_count[counts_v2$raw_count == "TNTC" & counts_v2$test == "GN"] <- 150*1.25
counts_v2$raw_count <- as.numeric(counts_v2$raw_count)
counts_v3 <- counts_v2 %>%
group_by(location, sampling, stage, sample_rep, test, dilution) %>%
mutate(averaged_count = mean(raw_count)) %>%
distinct(location, sampling, stage, sample_rep, test, dilution, averaged_count)
counts_v3$merge_col <- paste0(counts_v3$location, "_",
counts_v3$sampling, "_",
counts_v3$stage, "_",
counts_v3$sample_rep)
sample_mass_v2$merge_col <- paste0(sample_mass_v2$location, "_",
sample_mass_v2$sampling, "_",
sample_mass_v2$stage, "_",
sample_mass_v2$sample_rep)
data <- merge(counts_v3, sample_mass_v2, by = "merge_col",) %>%
dplyr::select(location.x, sampling.x, stage.x, sample_rep.x, test, weight_before_dilution,
weight_after_dilution, dilution, averaged_count)
colnames(data)[1:4] <- c("location", "sampling", "stage", "sample_rep")
data[, c("weight_before_dilution", "weight_after_dilution",
"dilution", "averaged_count")] <- sapply(data[, c("weight_before_dilution", "weight_after_dilution",
"dilution", "averaged_count")],
as.numeric)
buffer_mass <- data %>%
filter(!is.na(weight_after_dilution)) %>%
mutate(buffer_mass = weight_after_dilution - weight_before_dilution)
mean_buffer_mass <- mean(buffer_mass$buffer_mass)
data$weight_after_dilution <- ifelse(is.na(data$weight_after_dilution),
(data$weight_before_dilution + mean_buffer_mass),
data$weight_after_dilution)
data_arith <- data %>%
mutate(conc_arith = log10(averaged_count*
(weight_after_dilution/weight_before_dilution)*
(10^dilution))) %>%
dplyr::select(-c("weight_before_dilution", "weight_after_dilution", "dilution",
"averaged_count"))
data_geom <- data_arith %>%
group_by(location, sampling, stage, test) %>%
mutate(conc_geom = mean(conc_arith)) %>%
distinct(location, sampling, stage, test, conc_geom)
data_geom$season <- ifelse(grepl("S", data_geom$sampling),
"winter",
"summer")
data_geom_analysis <- data_geom %>%
filter(!(sampling %in% c("S1", "S2", "S3")))
e_com_test_data <- data_geom_analysis %>%
filter(stage == "D10") %>%
filter(!sampling %in% c("R7", "F3", "R1"))
e_com_test_data %>%
group_by(test, location) %>%
summarize(median = median(conc_geom),
percentile25 = summary(conc_geom)[2],
percentile75 = summary(conc_geom)[5])
e_com_test_data_subset <- e_com_test_data %>%
filter(test == "APC", location == "E")
wilcox.test(conc_geom ~ location, data = filter(e_com_test_data, test == "APC"), paired = TRUE)
wilcox.test(conc_geom ~ location, data = filter(e_com_test_data, test == "GN"), paired = TRUE)
wilcox.test(conc_geom ~ location, data = filter(e_com_test_data, test == "YM"), paired = TRUE)
summary_stats <- data_geom_analysis %>%
group_by(location, stage, test) %>%
summarize(median = quantile(conc_geom, type = 7)[3],
lq = quantile(conc_geom, type = 7)[2],
uq = quantile(conc_geom, type = 7)[4],
n = n())
net_growth_h_d0 <- data_geom_analysis %>%
filter(!(sampling %in% c("S5", "S6", "S8"))) %>%
filter(stage %in% c("H", "D0")) %>%
group_by(sampling, test) %>%
mutate(h_conc = conc_geom[stage == "H"]) %>%
ungroup() %>%
filter(stage == "D0") %>%
mutate(net_growth = conc_geom - h_conc)
net_growth_summary_h_d0 <- net_growth_h_d0 %>%
group_by(location, test) %>%
summarize(mean = mean(net_growth),
min = min(net_growth),
max = max(net_growth),
n = n())
net_growth_d0_d10 <- data_geom_analysis %>%
filter(!(sampling %in% c("S4", "S5", "S6", "S7", "S8", "S9"))) %>%
filter(stage %in% c("D0", "D10")) %>%
group_by(sampling, test) %>%
mutate(day0_conc = conc_geom[stage == "D0"]) %>%
ungroup() %>%
filter(stage == "D10") %>%
mutate(net_growth = conc_geom - day0_conc)
net_growth_summary_d0_d10 <- net_growth_d0_d10 %>%
group_by(location, test) %>%
summarize(mean = mean(net_growth),
min = min(net_growth),
max = max(net_growth),
n = n())
paired_net_growth_d0_d10 <- net_growth_d0_d10 %>%
filter(sampling %in% c("F1", "F2", "F4", "R2",
"R3", "R4", "R5", "R6")) %>%
dplyr::select("sampling", "test", "net_growth", "location") %>%
pivot_wider(names_from = location, values_from = net_growth)
#Net growth by distribution channel
paired_apc_net_growth <- filter(paired_net_growth_d0_d10, test == "APC")
wilcox.test(paired_apc_net_growth$E, paired_apc_net_growth$L, paired = TRUE)
paired_gn_net_growth <- filter(paired_net_growth_d0_d10, test == "GN")
wilcox.test(paired_gn_net_growth$E, paired_gn_net_growth$L, paired = TRUE)
paired_ym_net_growth <- filter(paired_net_growth_d0_d10, test == "YM")
wilcox.test(paired_ym_net_growth$E, paired_ym_net_growth$L, paired = TRUE)
data_geom$stage <- factor(data_geom$stage, levels = c("H", "T", "R", "D0",
"D2", "D3", "D4",
"D5", "D6", "D7",
"D8", "D10"))
data_geom_plot <- filter(data_geom, !(sampling %in% c("S1", "S2", "S3")))
data_geom_plot$location <- ifelse(data_geom_plot$location == "E",
"eCommerce",
"Local")
data_geom_plot$location <- factor(data_geom_plot$location,
levels = c("Local", "eCommerce"))
data_geom_boxplot <- filter(data_geom_plot,
stage %in% c("H", "D0", "D10"))
ggplot() +
geom_point(data = data_geom_plot,
aes(x = factor(stage), y = conc_geom, color = location, group = location),
alpha = 0,
position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.6)) +
facet_wrap( ~ test, nrow = 3) +
scale_color_brewer(palette = "Dark2", name = "Distribution channel") +
theme(strip.text = element_text(size = 7), axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6)) +
geom_boxplot(data = data_geom_boxplot,
aes(x = factor(stage), y = conc_geom, color = location),
outlier.size=2, outlier.shape = NA, linewidth = 0.3, width = 0.4,
position = position_dodge2(preserve = "single")) +
geom_point(data = data_geom_plot,
aes(x = factor(stage), y = conc_geom, color = location, group = location),
size = 0.3,
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.6)) +
ylab(expression("Concentration, log"[10]*"CFU/g")) + xlab("Sample") +
theme_bw()
s1_s3_geom_by_location <- s1_s3 %>%
mutate(lot = case_when(
lot == "L1" ~ "S1",
lot == "L2" ~ "S2",
lot == "L3" ~ "S3"
)) %>%
group_by(location, lot, stage, test) %>%
summarise(conc_geom = mean(log10count)) %>%
mutate(season = "winter")
s1_s3_geom_mod <- s1_s3 %>%
mutate(lot = case_when(
lot == "L1" ~ "S1",
lot == "L2" ~ "S2",
lot == "L3" ~ "S3"
)) %>%
filter(location != "E") %>%
group_by(lot, stage, test) %>%
summarise(conc_geom = mean(log10count)) %>%
mutate(season = "winter")
View(s1_s3_geom_by_location)
View(s1_s3_geom_mod)
s1_s3_geom_mod <- s1_s3 %>%
mutate(lot = case_when(
lot == "L1" ~ "S1",
lot == "L2" ~ "S2",
lot == "L3" ~ "S3"
)) %>%
group_by(lot, stage, test) %>%
summarise(conc_geom = mean(log10count)) %>%
mutate(season = "winter")
s1_s3_geom_mod <- s1_s3 %>%
mutate(lot = case_when(
lot == "L1" ~ "S1",
lot == "L2" ~ "S2",
lot == "L3" ~ "S3"
)) %>%
filter(location != "E") %>%
group_by(lot, stage, test) %>%
summarise(conc_geom = mean(log10count)) %>%
mutate(season = "winter")
