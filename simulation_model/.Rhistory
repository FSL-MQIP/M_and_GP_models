mutate(source = "gp_apc_china") %>%
mutate(sampday = paste0(sampling_code, "_", day))
colnames(gp_apc_china_plot)[3] <- "pred_conc"
#Plotting
us_pred_plot <- bind_rows(mm_strain_us_plot,
mm_apc_us_plot,
gp_apc_us_plot)
us_pred_plot <- us_pred_plot %>%
mutate(source = case_when(
source %in% c("mm_strain_us") ~ "Approach 1: MM, Strain (US)",
source %in% c("mm_apc_us") ~ "Approach 2: MM, APC (US)",
source %in% c("gp_apc_us") ~ "Approach 3: GP, APC (US)",
source %in% c("obs") ~ "Observed"
))
colnames(us_pred_plot)[6] <- "Source"
ggplot() +
geom_line(data = us_pred_plot, aes(x = day, y = pred_conc, group = Source,
linetype = Source)) +
facet_grid(rows = "sampling_code") +
geom_point(data = data_obs_us, aes(x = day, y = obs_conc), size = 0.5) +
ylab("Concentration, log10 CFU/g") + xlab("Day") +
scale_linetype_discrete(name = "Source") +
scale_linetype_manual(values=c("solid","dashed", "dotted", "dotdash"))+
theme_bw()
china_pred_plot <- bind_rows(mm_strain_china_plot,
gp_apc_china_plot)
china_pred_plot <- china_pred_plot %>%
mutate(source = case_when(
source %in% c("mm_strain_china") ~ "Approach 1: MM, Strain (China)",
source %in% c("gp_apc_china") ~ "Approach 4: GP, APC (China)",
source %in% c("obs") ~ "Observed"
))
colnames(china_pred_plot)[6] <- "Source"
plota <- ggplot() +
geom_line(data = filter(china_pred_plot,
sampling_code %in% c("S1", "S2", "S3",
"F1", "F2", "F3", "F4")),
aes(x = day, y = pred_conc, group = Source,
linetype = Source)) +
facet_grid(rows = "sampling_code") +
geom_point(data = filter(data_obs_china,
sampling_code %in% c("S1", "S2", "S3",
"F1", "F2", "F3", "F4")),
aes(x = day, y = obs_conc), size = 0.5) +
ylab("Concentration, log10 CFU/g") + xlab("Day") +
scale_linetype_discrete(name = "source") +
scale_linetype_manual(values=c("solid","dashed", "dotted", "dotdash"))+
theme_bw()
plotb <-ggplot() +
geom_line(data = filter(china_pred_plot,
sampling_code %in% c("R2", "R3",
"R4", "R5", "R6",
"R7")),
aes(x = day, y = pred_conc, group = Source,
linetype = Source)) +
facet_grid(rows = "sampling_code") +
geom_point(data = filter(data_obs_china,
sampling_code %in% c("R2", "R3",
"R4", "R5", "R6",
"R7")),
aes(x = day, y = obs_conc), size = 0.5) +
ylab("Concentration, log10 CFU/g") + xlab("Day") +
scale_linetype_discrete(name = "source") +
scale_linetype_manual(values=c("solid","dashed", "dotted", "dotdash"))+
theme_bw()
ggarrange(plota, plotb + rremove("ylab"), common.legend =  TRUE)
#   Loading packages
library(dplyr); library(MASS); library(VGAM); library(nlme)
#Set seed
set.seed(1)
## ---------------------------Inputs--------------------------------------------
#Initial_count
min_max <- read.csv("model_inputs/china_starting_conc.csv", header = TRUE)
mod <- readRDS("model_inputs/ml_models/gp_china_overall.RDS")
initial_count_dist <- function(n){
ans <- runif(n,
min = 5.5, #min_max$min[min_max$sampling == "S1"],
max = 6.5) #min_max$max[min_max$sampling == "S1"])
return(ans)
}
n_lots <- 1
n_packages <- 100
n_sim <- n_packages*n_lots
n_day <- 10
#Assigning initial count, number of strains, STs and temperature to each package
packages_sim <- data.frame(matrix(nrow = n_sim, ncol = 3))
colnames(packages_sim) <- c("package", "initial_count", "storage_temp")
packages_sim$package <- 1:n_packages
packages_sim$initial_count<- initial_count_dist(n_sim)
packages_sim$storage_temp <- 4 #temp_dist(n_sim)
#Expanding the dataframe to store observations for each strain and day of observation
packages_sim_exp <- packages_sim
#Creating a dataframe, to assess microbial growth over shelf life
shelf_life_sim <- packages_sim_exp %>%
group_by(package) %>%
dplyr::slice(rep(1, times = 10)) %>%
mutate(day = 1:10) %>%
mutate(day2 = I(day^2), day.log_d0_conc = day*initial_count,
day2.log_d0_conc = day2*initial_count) %>%
mutate(count = NA)
colnames(shelf_life_sim)[1] <- "lot"
colnames(shelf_life_sim)[2] <- "lot_d0_conc"
colnames(shelf_life_sim)[3] <- "temperature"
colnames(shelf_life_sim)[6] <- "day:lot_d0_conc"
colnames(shelf_life_sim)[7] <- "lot_d0_conc:day2"
shelf_life_sim$count <- predict(mod, shelf_life_sim[, c(4, 2, 5)], level = 0)
colnames(shelf_life_sim)[1] <- "package"
colnames(shelf_life_sim)[2] <- "initial_count"
colnames(shelf_life_sim)[3] <- "storage_temp"
count_summary_by_day <- shelf_life_sim %>%
dplyr::select(-c("day2", "day:lot_d0_conc", "lot_d0_conc:day2")) %>%
mutate(growth_model = "gp-apc",
loc = "china",
sampling_code = "overall")
View(count_summary_by_day)
sum <- count_summary_by_day %>%
filter(day %in% c(5, 10)) %>%
group_by(day) %>%
summarize(median = quantile(count)[3], lq = quantile(count)[2], uq = quantile(count)[4])
View(sum)
count_summary_by_day <- shelf_life_sim %>%
dplyr::select(-c("day2", "day:lot_d0_conc", "lot_d0_conc:day2")) %>%
mutate(growth_model = "gp-apc",
loc = "china",
sampling_code = "overall")
date <- Sys.Date()
date <- gsub("-", "_", date)
file_name <- paste0("outputs/count_by_day_gp_apc_china_", date, ".csv")
write.table(count_summary_by_day, file_name, sep = ",",
col.names = !file.exists(file_name), append = T, row.names = FALSE)
file_name <- paste0("outputs/overall_count_", date, ".csv")
write.table(count_summary_by_day, file_name, sep = ",",
col.names = !file.exists(file_name), append = T, row.names = FALSE)
#   Loading packages
library(dplyr); library(MASS); library(VGAM); library(nlme)
#Set seed
set.seed(1)
## ---------------------------Inputs--------------------------------------------
#Initial_count
min_max <- read.csv("model_inputs/china_starting_conc.csv", header = TRUE)
mod <- readRDS("model_inputs/ml_models/gp_s1.RDS")
initial_count_dist <- function(n){
ans <- runif(n,
min = min_max$min[min_max$sampling == "S1"],
max = min_max$max[min_max$sampling == "S1"])
return(ans)
}
n_lots <- 1
n_packages <- 100
n_sim <- n_packages*n_lots
n_day <- 10
#Assigning initial count, number of strains, STs and temperature to each package
packages_sim <- data.frame(matrix(nrow = n_sim, ncol = 3))
colnames(packages_sim) <- c("package", "initial_count", "storage_temp")
packages_sim$package <- 1:n_packages
packages_sim$initial_count<- initial_count_dist(n_sim)
packages_sim$storage_temp <- 4 #temp_dist(n_sim)
#Expanding the dataframe to store observations for each strain and day of observation
packages_sim_exp <- packages_sim
#Creating a dataframe, to assess microbial growth over shelf life
shelf_life_sim <- packages_sim_exp %>%
group_by(package) %>%
dplyr::slice(rep(1, times = 10)) %>%
mutate(day = 1:10) %>%
mutate(day2 = I(day^2), day.log_d0_conc = day*initial_count,
day2.log_d0_conc = day2*initial_count) %>%
mutate(count = NA)
colnames(shelf_life_sim)[1] <- "lot"
colnames(shelf_life_sim)[2] <- "lot_d0_conc"
colnames(shelf_life_sim)[3] <- "temperature"
colnames(shelf_life_sim)[6] <- "day:lot_d0_conc"
colnames(shelf_life_sim)[7] <- "lot_d0_conc:day2"
shelf_life_sim$count <- predict(mod, shelf_life_sim[, c(4, 2, 5)], level = 0)
colnames(shelf_life_sim)[1] <- "package"
colnames(shelf_life_sim)[2] <- "initial_count"
colnames(shelf_life_sim)[3] <- "storage_temp"
count_summary_by_day <- shelf_life_sim %>%
dplyr::select(-c("day2", "day:lot_d0_conc", "lot_d0_conc:day2")) %>%
mutate(growth_model = "gp-apc",
loc = "china",
sampling_code = "overall")
View(count_summary_by_day)
## ---------------------------Inputs--------------------------------------------
#Initial_count
min_max <- read.csv("model_inputs/china_starting_conc.csv", header = TRUE)
#   Loading packages
library(dplyr); library(MASS); library(VGAM); library(nlme)
#Set seed
set.seed(1)
## ---------------------------Inputs--------------------------------------------
#Initial_count
min_max <- read.csv("model_inputs/china_starting_conc.csv", header = TRUE)
mod <- readRDS("model_inputs/ml_models/gp_r7.RDS")
initial_count_dist <- function(n){
ans <- runif(n,
min = min_max$min[min_max$sampling == "R7"],
max = min_max$max[min_max$sampling == "R7"])
return(ans)
}
n_lots <- 1
n_packages <- 100
n_sim <- n_packages*n_lots
n_day <- 10
#Assigning initial count, number of strains, STs and temperature to each package
packages_sim <- data.frame(matrix(nrow = n_sim, ncol = 3))
colnames(packages_sim) <- c("package", "initial_count", "storage_temp")
packages_sim$package <- 1:n_packages
packages_sim$initial_count<- initial_count_dist(n_sim)
packages_sim$storage_temp <- 4 #temp_dist(n_sim)
#Expanding the dataframe to store observations for each strain and day of observation
packages_sim_exp <- packages_sim
#Creating a dataframe, to assess microbial growth over shelf life
shelf_life_sim <- packages_sim_exp %>%
group_by(package) %>%
dplyr::slice(rep(1, times = 10)) %>%
mutate(day = 1:10) %>%
mutate(day2 = I(day^2), day.log_d0_conc = day*initial_count,
day2.log_d0_conc = day2*initial_count) %>%
mutate(count = NA)
colnames(shelf_life_sim)[1] <- "lot"
colnames(shelf_life_sim)[2] <- "lot_d0_conc"
colnames(shelf_life_sim)[3] <- "temperature"
colnames(shelf_life_sim)[6] <- "day:lot_d0_conc"
colnames(shelf_life_sim)[7] <- "lot_d0_conc:day2"
shelf_life_sim$count <- predict(mod, shelf_life_sim[, c(4, 2, 5, 6, 7)], level = 0)
colnames(shelf_life_sim)[1] <- "package"
colnames(shelf_life_sim)[2] <- "initial_count"
colnames(shelf_life_sim)[3] <- "storage_temp"
count_summary_by_day <- shelf_life_sim %>%
dplyr::select(-c("day2", "day:lot_d0_conc", "lot_d0_conc:day2")) %>%
mutate(growth_model = "gp-apc",
loc = "china",
sampling_code = "overall")
View(count_summary_by_day)
setwd("/Volumes/BoorWiedmannLab/ss2633_Sriya_Sunil/Administrative/Papers/Paper4_walmart_sampling/data_analysis_github/simulation_model")
library(dplyr); library(lmerTest); library(ggplot2); library(Metrics)
library(reshape2); library(tidyverse); library(RColorBrewer)
library(ggpubr)
data_geom_china <- read.csv("model_inputs/concentration_by_day_modeling_data.csv")
data_geom_us <- read.csv("model_inputs/growth_curve_biorep.csv")
mm_strain_us <- read.csv("outputs/count_by_day_mm_strain_us.csv", header = TRUE)
mm_strain_china <- read.csv("outputs/count_by_day_mm_strain_china.csv", header = TRUE)
mm_apc_us <- read.csv("outputs/count_by_day_mm_apc_us.csv", header = TRUE)
gp_apc_us <- read.csv("outputs/count_by_day_gp_apc_us.csv", header = TRUE)
gp_apc_china <- read.csv("outputs/count_by_day_gp_apc_china.csv", header = TRUE)
overall <- read.csv("outputs/overall_count.csv", header = TRUE)
data_obs_china <- data_geom_china %>%
filter(test == "APC") %>%
filter(!(stage %in% c("H", "T", "D0"))) %>%
ungroup() %>%
dplyr::select(sampling, stage, conc_geom) %>%
mutate(source = "obs")
colnames(data_obs_china) <- c("sampling_code", "day", "obs_conc", "source")
data_obs_china$day <- as.numeric(gsub("D", "", data_obs_china$day))
data_obs_china$sampday <- paste0(data_obs_china$sampling_code, "_", data_obs_china$day)
rm(data_geom_china)
data_obs_us <- data_geom_us %>%
filter(day != 0) %>%
ungroup() %>%
dplyr::select(lot, day, conc_geom) %>%
mutate(source = "obs")
colnames(data_obs_us) <- c("sampling_code", "day", "obs_conc", "source")
data_obs_us$day <- as.numeric(gsub("D", "", data_obs_us$day))
data_obs_us$sampday <- paste0(data_obs_us$sampling_code, "_", data_obs_us$day)
rm(data_geom_us)
overall_summary_stats <- overall %>%
group_by(growth_model, loc, day) %>%
summarize(median = round(median(count), 2), lq = round(quantile(count)[2], 2),
uq = round(quantile(count)[4], 2)) %>%
filter(day %in% c(5, 10))
mm_strain_china_sum <- mm_strain_china %>%
group_by(sampling_code, day) %>%
summarize(med_conc = median(count),
lq = quantile(count)[2],
uq = quantile(count)[4]) %>%
mutate(source = "mm_strain_china") %>%
mutate(sampday = paste0(sampling_code, "_", day))
colnames(mm_strain_china_sum)[3] <- "pred_conc"
mm_strain_us_sum <- mm_strain_us %>%
group_by(sampling_code, day) %>%
summarize(med_conc = median(count),
lq = quantile(count)[2],
uq = quantile(count)[4]) %>%
mutate(source = "mm_strain_us") %>%
mutate(sampday = paste0(sampling_code, "_", day))
colnames(mm_strain_us_sum)[3] <- "pred_conc"
mm_apc_us_sum <- mm_apc_us %>%
group_by(sampling_code, day) %>%
summarize(med_conc = median(count),
lq = quantile(count)[2],
uq = quantile(count)[4]) %>%
mutate(source = "mm_apc_us") %>%
mutate(sampday = paste0(sampling_code, "_", day))
colnames(mm_apc_us_sum)[3] <- "pred_conc"
gp_apc_us_sum <- gp_apc_us %>%
group_by(sampling_code, day) %>%
summarize(med_conc = median(count),
lq = quantile(count)[2],
uq = quantile(count)[4]) %>%
mutate(source = "gp_apc_us") %>%
mutate(sampday = paste0(sampling_code, "_", day))
colnames(gp_apc_us_sum)[3] <- "pred_conc"
gp_apc_china_sum <- gp_apc_china %>%
group_by(sampling_code, day) %>%
summarize(med_conc = median(count),
lq = quantile(count)[2],
uq = quantile(count)[4]) %>%
mutate(source = "gp_apc_china") %>%
mutate(sampday = paste0(sampling_code, "_", day))
colnames(gp_apc_china_sum)[3] <- "pred_conc"
us_lots <- c(1:8, "overall")
us_rmse <- vector(mode = "logical", length = length(us_lots))
us_af <- vector(mode = "logical", length = length(us_lots))
us_bf <- vector(mode = "logical", length = length(us_lots))
us_perf_met <- bind_cols(us_lots, us_rmse, us_af, us_bf)
colnames(us_perf_met) <- c("lots", "rmse", "af", "bf")
china_lots <- c("S1", "S2", "S3", "F1", "F2", "F3", "F4", "R1", "R2", "R3",
"R4", "R5", "R6", "R7", "overall")
china_rmse <- vector(mode = "logical", length = length(china_lots))
china_af <- vector(mode = "logical", length = length(china_lots))
china_bf <- vector(mode = "logical", length = length(china_lots))
china_perf_met <- bind_cols(china_lots, china_rmse, china_af, china_bf)
colnames(china_perf_met) <- c("lots", "rmse", "af", "bf")
met_mm_strain_us <-  us_perf_met
met_mm_apc_us <-  us_perf_met
met_gp_apc_us <-  us_perf_met
met_mm_strain_china <-  china_perf_met
met_gp_apc_china <-  china_perf_met
mm_strain_us_sum$obs_conc <- NA
for(i in 1:nrow(mm_strain_us_sum)){
if(mm_strain_us_sum$sampday[i] %in% data_obs_us$sampday){
index <- which(mm_strain_us_sum$sampday[i] == data_obs_us$sampday)
mm_strain_us_sum$obs_conc[i] <- data_obs_us$obs_conc[index]
}
}
View(met_mm_strain_china)
View(met_mm_strain_us)
mm_strain_us_sum <- mm_strain_us_sum %>%
filter(!(is.na(obs_conc)))
for(i in 1:nrow(met_mm_strain_us)){
if(met_mm_strain_us$lots[i] != "overall"){
index <- met_mm_strain_us$lots[i]
dat <- filter(mm_strain_us_sum, sampling_code == index)
met_mm_strain_us$rmse[i] <- rmse(dat$obs_conc, dat$pred_conc)
af_sum <- sum((log(dat$pred_conc) - log(dat$obs_conc))^2)
af <- exp(sqrt(af_sum/nrow(dat)))
met_mm_strain_us$af[i] <- af
bf_sum <- sum((log(dat$pred_conc) - log(dat$obs_conc)))
bf <- exp(bf_sum/nrow(dat))
met_mm_strain_us$bf[i] <- bf
} else {
met_mm_strain_us$rmse[i] <- rmse(mm_strain_us_sum$obs_conc, mm_strain_us_sum$pred_conc)
af_sum <- sum((log(mm_strain_us_sum$pred_conc) - log(mm_strain_us_sum$obs_conc))^2)
af <- exp(sqrt(af_sum/nrow(mm_strain_us_sum)))
met_mm_strain_us$af[i] <- af
bf_sum <- sum((log(mm_strain_us_sum$pred_conc) - log(mm_strain_us_sum$obs_conc)))
bf <- exp(bf_sum/nrow(mm_strain_us_sum))
met_mm_strain_us$bf[i] <- bf
}
}
mm_strain_china_sum$obs_conc <- NA
for(i in 1:nrow(mm_strain_china_sum)){
if(mm_strain_china_sum$sampday[i] %in% data_obs_china$sampday){
index <- which(mm_strain_china_sum$sampday[i] == data_obs_china$sampday)
mm_strain_china_sum$obs_conc[i] <- data_obs_china$obs_conc[index]
}
}
mm_strain_china_sum <- mm_strain_china_sum %>%
filter(!(is.na(obs_conc)))
for(i in 1:nrow(met_mm_strain_china)){
if(met_mm_strain_china$lots[i] != "overall"){
index <- met_mm_strain_china$lots[i]
dat <- filter(mm_strain_china_sum, sampling_code == index)
met_mm_strain_china$rmse[i] <- rmse(dat$obs_conc, dat$pred_conc)
af_sum <- sum((log(dat$pred_conc) - log(dat$obs_conc))^2)
af <- exp(sqrt(af_sum/nrow(dat)))
met_mm_strain_china$af[i] <- af
bf_sum <- sum((log(dat$pred_conc) - log(dat$obs_conc)))
bf <- exp(bf_sum/nrow(dat))
met_mm_strain_china$bf[i] <- bf
} else {
met_mm_strain_china$rmse[i] <- rmse(mm_strain_china_sum$obs_conc, mm_strain_china_sum$pred_conc)
af_sum <- sum((log(mm_strain_china_sum$pred_conc) - log(mm_strain_china_sum$obs_conc))^2)
af <- exp(sqrt(af_sum/nrow(mm_strain_china_sum)))
met_mm_strain_china$af[i] <- af
bf_sum <- sum((log(mm_strain_china_sum$pred_conc) - log(mm_strain_china_sum$obs_conc)))
bf <- exp(bf_sum/nrow(mm_strain_china_sum))
met_mm_strain_china$bf[i] <- bf
}
}
mm_apc_us_sum$obs_conc <- NA
for(i in 1:nrow(mm_apc_us_sum)){
if(mm_apc_us_sum$sampday[i] %in% data_obs_us$sampday){
index <- which(mm_apc_us_sum$sampday[i] == data_obs_us$sampday)
mm_apc_us_sum$obs_conc[i] <- data_obs_us$obs_conc[index]
}
}
mm_apc_us_sum <- mm_apc_us_sum %>%
filter(!(is.na(obs_conc)))
for(i in 1:nrow(met_mm_apc_us)){
if(met_mm_apc_us$lots[i] != "overall"){
index <- met_mm_apc_us$lots[i]
dat <- filter(mm_apc_us_sum, sampling_code == index)
met_mm_apc_us$rmse[i] <- rmse(dat$obs_conc, dat$pred_conc)
af_sum <- sum((log(dat$pred_conc) - log(dat$obs_conc))^2)
af <- exp(sqrt(af_sum/nrow(dat)))
met_mm_apc_us$af[i] <- af
bf_sum <- sum((log(dat$pred_conc) - log(dat$obs_conc)))
bf <- exp(bf_sum/nrow(dat))
met_mm_apc_us$bf[i] <- bf
} else {
met_mm_apc_us$rmse[i] <- rmse(mm_apc_us_sum$obs_conc, mm_apc_us_sum$pred_conc)
af_sum <- sum((log(mm_apc_us_sum$pred_conc) - log(mm_apc_us_sum$obs_conc))^2)
af <- exp(sqrt(af_sum/nrow(mm_apc_us_sum)))
met_mm_apc_us$af[i] <- af
bf_sum <- sum((log(mm_apc_us_sum$pred_conc) - log(mm_apc_us_sum$obs_conc)))
bf <- exp(bf_sum/nrow(mm_apc_us_sum))
met_mm_apc_us$bf[i] <- bf
}
}
gp_apc_us_sum$obs_conc <- NA
for(i in 1:nrow(gp_apc_us_sum)){
if(gp_apc_us_sum$sampday[i] %in% data_obs_us$sampday){
index <- which(gp_apc_us_sum$sampday[i] == data_obs_us$sampday)
gp_apc_us_sum$obs_conc[i] <- data_obs_us$obs_conc[index]
}
}
gp_apc_us_sum <- gp_apc_us_sum %>%
filter(!(is.na(obs_conc)))
for(i in 1:nrow(met_gp_apc_us)){
if(met_gp_apc_us$lots[i] != "overall"){
index <- met_gp_apc_us$lots[i]
dat <- filter(gp_apc_us_sum, sampling_code == index)
met_gp_apc_us$rmse[i] <- rmse(dat$obs_conc, dat$pred_conc)
af_sum <- sum((log(dat$pred_conc) - log(dat$obs_conc))^2)
af <- exp(sqrt(af_sum/nrow(dat)))
met_gp_apc_us$af[i] <- af
bf_sum <- sum((log(dat$pred_conc) - log(dat$obs_conc)))
bf <- exp(bf_sum/nrow(dat))
met_gp_apc_us$bf[i] <- bf
} else {
met_gp_apc_us$rmse[i] <- rmse(gp_apc_us_sum$obs_conc, gp_apc_us_sum$pred_conc)
af_sum <- sum((log(gp_apc_us_sum$pred_conc) - log(gp_apc_us_sum$obs_conc))^2)
af <- exp(sqrt(af_sum/nrow(gp_apc_us_sum)))
met_gp_apc_us$af[i] <- af
bf_sum <- sum((log(gp_apc_us_sum$pred_conc) - log(gp_apc_us_sum$obs_conc)))
bf <- exp(bf_sum/nrow(gp_apc_us_sum))
met_gp_apc_us$bf[i] <- bf
}
}
gp_apc_china_sum$obs_conc <- NA
for(i in 1:nrow(gp_apc_china_sum)){
if(gp_apc_china_sum$sampday[i] %in% data_obs_china$sampday){
index <- which(gp_apc_china_sum$sampday[i] == data_obs_china$sampday)
gp_apc_china_sum$obs_conc[i] <- data_obs_china$obs_conc[index]
}
}
gp_apc_china_sum <- gp_apc_china_sum %>%
filter(!(is.na(obs_conc)))
for(i in 1:nrow(met_gp_apc_china)){
if(met_gp_apc_china$lots[i] != "overall"){
index <- met_gp_apc_china$lots[i]
dat <- filter(gp_apc_china_sum, sampling_code == index)
met_gp_apc_china$rmse[i] <- rmse(dat$obs_conc, dat$pred_conc)
af_sum <- sum((log(dat$pred_conc) - log(dat$obs_conc))^2)
af <- exp(sqrt(af_sum/nrow(dat)))
met_gp_apc_china$af[i] <- af
bf_sum <- sum((log(dat$pred_conc) - log(dat$obs_conc)))
bf <- exp(bf_sum/nrow(dat))
met_gp_apc_china$bf[i] <- bf
} else {
met_gp_apc_china$rmse[i] <- rmse(gp_apc_china_sum$obs_conc, gp_apc_china_sum$pred_conc)
af_sum <- sum((log(gp_apc_china_sum$pred_conc) - log(gp_apc_china_sum$obs_conc))^2)
af <- exp(sqrt(af_sum/nrow(gp_apc_china_sum)))
met_gp_apc_china$af[i] <- af
bf_sum <- sum((log(gp_apc_china_sum$pred_conc) - log(gp_apc_china_sum$obs_conc)))
bf <- exp(bf_sum/nrow(gp_apc_china_sum))
met_gp_apc_china$bf[i] <- bf
}
}
#Summarizing data for plotting
mm_strain_china_plot <- mm_strain_china %>%
group_by(sampling_code, day) %>%
summarize(med_conc = median(count),
lq = quantile(count)[2],
uq = quantile(count)[4]) %>%
mutate(source = "mm_strain_china") %>%
mutate(sampday = paste0(sampling_code, "_", day))
colnames(mm_strain_china_plot)[3] <- "pred_conc"
mm_strain_us_plot <- mm_strain_us %>%
group_by(sampling_code, day) %>%
summarize(med_conc = median(count),
lq = quantile(count)[2],
uq = quantile(count)[4]) %>%
mutate(source = "mm_strain_us") %>%
mutate(sampday = paste0(sampling_code, "_", day))
colnames(mm_strain_us_plot)[3] <- "pred_conc"
mm_apc_us_plot <- mm_apc_us %>%
group_by(sampling_code, day) %>%
summarize(med_conc = median(count),
lq = quantile(count)[2],
uq = quantile(count)[4]) %>%
mutate(source = "mm_apc_us") %>%
mutate(sampday = paste0(sampling_code, "_", day))
View(met_mm_strain_us)
View(met_mm_strain_us)
View(mm_strain_us_plot)
View(met_mm_strain_china)
View(met_mm_apc_us)
View(met_gp_apc_us)
View(met_gp_apc_china)
View(overall_summary_stats)
